create or replace PROCEDURE "USP_STC_ALARM_INFO_SET" 
(
    P_ALARM_ID              IN NUMBER,
    P_ALARM_NM              IN NVARCHAR2,
    P_LIGHTALARM_GB         IN CHAR,
    P_MODULE_NM             IN NVARCHAR2,
    P_DESC_NM_KOR           IN NVARCHAR2,
    P_DESC_NM_ENG           IN NVARCHAR2,
    P_DESC_NM_CHN           IN NVARCHAR2,
    P_DESC_NM_HUN           IN NVARCHAR2,
    P_SOLUTION_NM_KOR       IN NVARCHAR2,
    P_SOLUTION_NM_ENG       IN NVARCHAR2,
    P_SOLUTION_NM_CHN       IN NVARCHAR2,
    P_SOLUTION_NM_HUN       IN NVARCHAR2,
    P_DEL                   IN CHAR,
    P_TARGET                IN NVARCHAR2,
    R_RESULT                OUT NVARCHAR2,
    R_TEMP                  OUT NVARCHAR2
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    IF P_TARGET='ID' THEN
        SELECT COUNT(ALARM_ID)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE ALARM_ID=P_ALARM_ID;
    ELSIF P_TARGET='NAME' THEN
        SELECT COUNT(ALARM_NM)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE ALARM_NM=P_ALARM_NM;
    ELSIF P_TARGET='LIGHT' THEN
        SELECT COUNT(LIGHTALARM_GB)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE LIGHTALARM_GB=P_LIGHTALARM_GB;    
    ELSIF P_TARGET='TYPE' THEN
        SELECT COUNT(MODULE_NM)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE MODULE_NM=P_MODULE_NM;
    ELSIF P_TARGET='DESC' THEN
        SELECT COUNT(DESC_NM_KOR)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE DESC_NM_KOR=P_DESC_NM_KOR;
    ELSE
        SELECT COUNT(SOLUTION_NM_KOR)
            INTO V_CNT
            FROM TB_ALARM_INFO WHERE SOLUTION_NM_KOR=P_SOLUTION_NM_KOR;        
    END IF;

    IF V_CNT=0 THEN
        IF P_DEL='0' THEN
            R_TEMP := 'ALARM_INSERT';
            R_RESULT := P_ALARM_ID;

            INSERT INTO TB_ALARM_INFO(ALARM_ID, ALARM_NM, LIGHTALARM_GB, MODULE_NM, DESC_NM_KOR, 
                SOLUTION_NM_KOR, DESC_NM_ENG, SOLUTION_NM_ENG, DESC_NM_CHN, SOLUTION_NM_CHN, DESC_NM_HUN, SOLUTION_NM_HUN) 
                VALUES (P_ALARM_ID, P_ALARM_NM, P_LIGHTALARM_GB, P_MODULE_NM, P_DESC_NM_KOR, P_SOLUTION_NM_KOR, 
                    P_DESC_NM_ENG, P_SOLUTION_NM_ENG, P_DESC_NM_CHN, P_SOLUTION_NM_CHN, P_DESC_NM_HUN, P_SOLUTION_NM_HUN);
        END IF;
    ELSE
        IF P_DEL='1' THEN
            R_TEMP := 'ALARM_DELETE';
            R_RESULT := P_ALARM_ID;
            DELETE FROM TB_ALARM_INFO WHERE ALARM_ID=P_ALARM_ID; 
        ELSE

            R_TEMP := 'ALARM_UPDATE';

            IF P_TARGET='ID' THEN 
                R_RESULT := P_ALARM_ID;
                UPDATE TB_ALARM_INFO SET ALARM_NM=P_ALARM_NM, LIGHTALARM_GB=P_LIGHTALARM_GB, MODULE_NM=P_MODULE_NM, 
                    DESC_NM_KOR=P_DESC_NM_KOR, SOLUTION_NM_KOR=P_SOLUTION_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE ALARM_ID=P_ALARM_ID;
            ELSIF P_TARGET='NAME' THEN
                R_RESULT := P_ALARM_NM;
                UPDATE TB_ALARM_INFO SET ALARM_ID=P_ALARM_ID, LIGHTALARM_GB=P_LIGHTALARM_GB, MODULE_NM=P_MODULE_NM, 
                    DESC_NM_KOR=P_DESC_NM_KOR, SOLUTION_NM_KOR=P_SOLUTION_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE ALARM_NM=P_ALARM_NM;            
            ELSIF P_TARGET='LIGHT' THEN
                R_RESULT := P_LIGHTALARM_GB;
                UPDATE TB_ALARM_INFO SET ALARM_ID=P_ALARM_ID, ALARM_NM=P_ALARM_NM, MODULE_NM=P_MODULE_NM, 
                    DESC_NM_KOR=P_DESC_NM_KOR, SOLUTION_NM_KOR=P_SOLUTION_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE LIGHTALARM_GB=P_LIGHTALARM_GB;                 
            ELSIF P_TARGET='TYPE' THEN
                R_RESULT := P_MODULE_NM;
                UPDATE TB_ALARM_INFO SET ALARM_ID=P_ALARM_ID, ALARM_NM=P_ALARM_NM, LIGHTALARM_GB=P_LIGHTALARM_GB, 
                    DESC_NM_KOR=P_DESC_NM_KOR, SOLUTION_NM_KOR=P_SOLUTION_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE MODULE_NM=P_MODULE_NM;               
            ELSIF P_TARGET='DESC' THEN
                R_RESULT := P_DESC_NM_KOR;
                UPDATE TB_ALARM_INFO SET ALARM_ID=P_ALARM_ID, ALARM_NM=P_ALARM_NM, LIGHTALARM_GB=P_LIGHTALARM_GB, MODULE_NM=P_MODULE_NM, 
                    SOLUTION_NM_KOR=P_SOLUTION_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE DESC_NM_KOR=P_DESC_NM_KOR;             
            ELSE
                R_RESULT := P_SOLUTION_NM_KOR;
                UPDATE TB_ALARM_INFO SET ALARM_ID=P_ALARM_ID, ALARM_NM=P_ALARM_NM, LIGHTALARM_GB=P_LIGHTALARM_GB, MODULE_NM=P_MODULE_NM, 
                    DESC_NM_KOR=P_DESC_NM_KOR, DESC_NM_ENG=P_DESC_NM_ENG, SOLUTION_NM_ENG=P_SOLUTION_NM_ENG,
                    DESC_NM_CHN=P_DESC_NM_CHN, SOLUTION_NM_CHN=P_SOLUTION_NM_CHN, DESC_NM_HUN=P_DESC_NM_HUN, SOLUTION_NM_HUN=P_SOLUTION_NM_HUN
                    WHERE SOLUTION_NM_KOR=P_SOLUTION_NM_KOR;                
            END IF;
        END IF;
    END IF;

    COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'WRONG_ALARM';  
            R_TEMP := 'EXCEPTION';
            ROLLBACK;
        END; 
END USP_STC_ALARM_INFO_SET;


/

create or replace PROCEDURE "USP_STC_CARRIER_INFO_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_CARRIER_ID        IN NVARCHAR2,
    P_CARRIER_LOC       IN NVARCHAR2,
    P_PRODUCT_STAT      IN CHAR,
    P_POLARITY_STAT     IN CHAR,
    P_WINDERDIR_STAT    IN CHAR,
    P_PRODUCT_CNT       IN NUMBER,
    P_FINALLOC_NO       IN NVARCHAR2,
    P_INNERTYPE_GB      IN NUMBER,
	P_PALLET_GB         IN NUMBER, 
	P_TRAYSTACK_CNT     IN NUMBER, 
	P_TRAYTYPE_STAT     IN CHAR, 
	P_UNCOATED_STAT     IN CHAR, 
	P_CORETYPE_STAT     IN CHAR, 
	P_VALIDATION_ID     IN NVARCHAR2, 
	P_PRODUCTEND_STAT   IN CHAR, 
	P_CARRIER_CD        IN NVARCHAR2, 
	P_CARRIER_GB        IN NUMBER, 
	P_CARRIER_STAT      IN CHAR, 
	P_LOT_ID            IN NVARCHAR2, 
	P_FIRSTLOT_ID       IN NVARCHAR2, 
	P_SECONDLOT_ID      IN NVARCHAR2, 
	P_THIRDLOT_ID       IN NVARCHAR2, 
	P_FOURTHLOT_ID      IN NVARCHAR2, 
	P_FIFTHLOT_ID       IN NVARCHAR2, 
	P_SIXTHLOT_ID       IN NVARCHAR2, 
	P_CARRYIN_DTTM      IN TIMESTAMP, 
	P_CARRIERID_STAT    IN CHAR,
    P_CARRIERHEIGHT_STAT    IN CHAR,
    P_DEL               IN CHAR,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2,
    R_RESULT2           OUT NVARCHAR2,
    R_TEMP2             OUT NVARCHAR2,
    R_CARRIER_LOC       OUT NVARCHAR2,
    R_CARRIER_ID        OUT NVARCHAR2
)
IS
    V_CNT  NUMBER := 0;
    TEMP_CARRIER_LOC VARCHAR(10);
    V_SQL VARCHAR2(2000);
    LOG_TEMP1 NVARCHAR2(100);
BEGIN
    IF P_CARRIER_ID IS NOT NULL THEN /* CARRIER_ID 로 유니크 하게 관리함. 240330 RGJ  */      
    
        /* 하기 구문은 기존에 사용하고 있는것 */
        /*SELECT COUNT(CARRIER_ID) 
            INTO V_CNT FROM TB_CARRIER_INFO
            WHERE SCS_CD=P_SCS_CD AND CARRIER_ID=P_CARRIER_ID;*/
        /* 230922 조숭진 select count 조건 변경 */

        /*(SELECT COUNT(CASE WHEN CARRIER_ID=P_CARRIER_ID AND CARRIER_LOC=P_CARRIER_LOC THEN 1 END)
            INTO V_CNT FROM TB_CARRIER_INFO
            WHERE SCS_CD=P_SCS_CD;*/
        

        LOG_TEMP1 := 'COUNT_CHECK';    

        /* LOCATION으로 보는 이유는 해당 로케이션으로 자재데이터db에 있었는데.. 다른자재로 엎어쓸 경우 새로 데이터를 생성하기 때문이다.*/
        
        SELECT COUNT(P_CARRIER_ID)
            INTO V_CNT
            FROM TB_CARRIER_INFO
            WHERE SCS_CD=P_SCS_CD AND CARRIER_ID = P_CARRIER_ID;        /* CARRIER_ID 로 유니크 하게 관리함. 240330 RGJ */

        /*V_SQL := 'SELECT COUNT(CARRIER_ID) INTO V_CNT FROM P_TABLENAME WHERE SCS_CD = P_SCS_CD AND CARRIER_LOC = P_CARRIER_LOC';
        EXECUTE IMMEDIATE V_SQL INTO V_CNT;*/

        IF V_CNT = 0
        THEN
            /*V_CNT := 0;
            SELECT COUNT(P_CARRIER_LOC)
                INTO V_CNT
                FROM TB_CARRIER_INFO
                WHERE SCS_CD=P_SCS_CD AND CARRIER_LOC=P_CARRIER_LOC;*/

            /*IF V_CNT <> 0 THEN
                R_TEMP := 'CARRIER_UPDATE1';
                R_RESULT := P_CARRIER_LOC;
                UPDATE TB_CARRIER_INFO SET CARRIER_ID=P_CARRIER_ID, CARRIER_LOC=P_CARRIER_LOC, PRODUCT_STAT=P_PRODUCT_STAT, POLARITY_STAT=P_POLARITY_STAT, 
                    WINDERDIR_STAT=P_WINDERDIR_STAT, PRODUCT_CNT=P_PRODUCT_CNT, FINALLOC_NO=P_FINALLOC_NO, INNERTYPE_GB=P_INNERTYPE_GB, 
                    PALLET_GB=P_PALLET_GB, TRAYSTACK_CNT=P_TRAYSTACK_CNT, TRAYTYPE_STAT=P_TRAYTYPE_STAT,
                    UNCOATED_STAT=P_UNCOATED_STAT, CORETYPE_STAT=P_CORETYPE_STAT, VALIDATION_ID=P_VALIDATION_ID, 
                    PRODUCTEND_STAT=P_PRODUCTEND_STAT, CARRIER_CD=P_CARRIER_CD, CARRIER_GB=P_CARRIER_GB,
                    CARRIER_STAT=P_CARRIER_STAT, LOT_ID=P_LOT_ID, FIRSTLOT_ID=P_FIRSTLOT_ID, SECONDLOT_ID=P_SECONDLOT_ID, 
                    THIRDLOT_ID=P_THIRDLOT_ID, FOURTHLOT_ID=P_FOURTHLOT_ID,
                    FIFTHLOT_ID=FIFTHLOT_ID, SIXTHLOT_ID=P_SIXTHLOT_ID, CARRYIN_DTTM=P_CARRYIN_DTTM, CARRIERID_STAT=P_CARRIERID_STAT 
                    WHERE CARRIER_LOC=P_CARRIER_LOC AND SCS_CD=P_SCS_CD;
            ELSE        
                R_TEMP := 'CARRIER_INSERT';
                R_RESULT := P_CARRIER_LOC;
                INSERT INTO TB_CARRIER_INFO(SCS_CD, CARRIER_ID, CARRIER_LOC, PRODUCT_STAT, POLARITY_STAT, WINDERDIR_STAT, PRODUCT_CNT, 
                    FINALLOC_NO, INNERTYPE_GB, PALLET_GB, TRAYSTACK_CNT, TRAYTYPE_STAT, UNCOATED_STAT, CORETYPE_STAT, VALIDATION_ID, 
                    PRODUCTEND_STAT, CARRIER_CD, CARRIER_GB, CARRIER_STAT, LOT_ID, FIRSTLOT_ID, SECONDLOT_ID, THIRDLOT_ID, FOURTHLOT_ID, 
                    FIFTHLOT_ID, SIXTHLOT_ID, CARRYIN_DTTM, CARRIERID_STAT) 
                    VALUES (P_SCS_CD, P_CARRIER_ID, P_CARRIER_LOC, P_PRODUCT_STAT, P_POLARITY_STAT, P_WINDERDIR_STAT, P_PRODUCT_CNT, 
                    P_FINALLOC_NO, P_INNERTYPE_GB, P_PALLET_GB, P_TRAYSTACK_CNT, P_TRAYTYPE_STAT, P_UNCOATED_STAT, P_CORETYPE_STAT, 
                    P_VALIDATION_ID, P_PRODUCTEND_STAT, P_CARRIER_CD, P_CARRIER_GB, P_CARRIER_STAT, P_LOT_ID, P_FIRSTLOT_ID, P_SECONDLOT_ID, 
                    P_THIRDLOT_ID, P_FOURTHLOT_ID, P_FIFTHLOT_ID, P_SIXTHLOT_ID, P_CARRYIN_DTTM, P_CARRIERID_STAT);
            END IF;*/
            
            IF P_DEL <> '1' THEN  /*240409 RGJ 삭제플래그 있는데 테이블에 삽입 하면 안됨.*/
                LOG_TEMP1 := 'INSERT_CHECK';
                R_TEMP := 'CARRIER_INSERT';
                R_RESULT := P_CARRIER_ID;
                INSERT INTO TB_CARRIER_INFO(SCS_CD, CARRIER_ID, CARRIER_LOC, PRODUCT_STAT, POLARITY_STAT, WINDERDIR_STAT, PRODUCT_CNT, 
                    FINALLOC_NO, INNERTYPE_GB, PALLET_GB, TRAYSTACK_CNT, TRAYTYPE_STAT, UNCOATED_STAT, CORETYPE_STAT, VALIDATION_ID, 
                    PRODUCTEND_STAT, CARRIER_CD, CARRIER_GB, CARRIER_STAT, LOT_ID, FIRSTLOT_ID, SECONDLOT_ID, THIRDLOT_ID, FOURTHLOT_ID, 
                    FIFTHLOT_ID, SIXTHLOT_ID, CARRYIN_DTTM, CARRIERID_STAT, CARRIERHEIGHT_STAT) 
                    VALUES (P_SCS_CD, P_CARRIER_ID, P_CARRIER_LOC, P_PRODUCT_STAT, P_POLARITY_STAT, P_WINDERDIR_STAT, P_PRODUCT_CNT, 
                    P_FINALLOC_NO, P_INNERTYPE_GB, P_PALLET_GB, P_TRAYSTACK_CNT, P_TRAYTYPE_STAT, P_UNCOATED_STAT, P_CORETYPE_STAT, 
                    P_VALIDATION_ID, P_PRODUCTEND_STAT, P_CARRIER_CD, P_CARRIER_GB, P_CARRIER_STAT, P_LOT_ID, P_FIRSTLOT_ID, P_SECONDLOT_ID, 
                    P_THIRDLOT_ID, P_FOURTHLOT_ID, P_FIFTHLOT_ID, P_SIXTHLOT_ID, P_CARRYIN_DTTM, P_CARRIERID_STAT, P_CARRIERHEIGHT_STAT);  
            END IF;
            /* DELETE FROM TB_CARRIER_INFO WHERE SCS_CD = P_SCS_CD AND CARRIER_ID = P_CARRIER_ID AND CARRIER_LOC != P_CARRIER_LOC; */

            /*20220531 조숭진 SHELF에 적재 후 CARRIER_LOC RM으로 DB에 남아있어서 여기서 삭제한다. 나중에 수정되면 하기 내용 주석처리 */
            /*IF REGEXP_INSTR(P_CARRIER_LOC,'[^0-9]') = 0
            THEN
                V_CNT := 0;
                SELECT COUNT(CARRIER_ID)
                    INTO V_CNT
                    FROM TB_CARRIER_INFO
                    WHERE SCS_CD=P_SCS_CD AND CARRIER_ID=P_CARRIER_ID AND CARRIER_LOC LIKE 'RM%';

                IF V_CNT <> 0 THEN
                    SELECT CARRIER_LOC
                        INTO TEMP_CARRIER_LOC
                        FROM TB_CARRIER_INFO
                        WHERE SCS_CD=P_SCS_CD AND CARRIER_ID=P_CARRIER_ID AND CARRIER_LOC LIKE 'RM%'
                        GROUP BY CARRIER_LOC;

                    DELETE FROM TB_CARRIER_INFO WHERE SCS_CD = P_SCS_CD AND CARRIER_ID = P_CARRIER_ID AND CARRIER_LOC = TEMP_CARRIER_LOC;

                R_TEMP2 := 'RM_CARRIER_DELETE';
                R_RESULT2 := TEMP_CARRIER_LOC;
                END IF;
            END IF;*/
            /*20220531 조숭진 SHELF에 적재 후 CARRIER_LOC RM으로 DB에 남아있어서 여기서 삭제한다. 나중에 수정되면 하기 내용 주석처리 e*/
        ELSE        
            IF P_DEL = '1' 
            THEN
                LOG_TEMP1 := 'DELETE_CHECK';
                R_TEMP := 'CARRIER_DELETE';
                R_RESULT := P_CARRIER_LOC;
                DELETE FROM TB_CARRIER_INFO WHERE SCS_CD = P_SCS_CD AND CARRIER_ID=P_CARRIER_ID;
            ELSE
                LOG_TEMP1 := 'UPDATE_CHECK';
                R_TEMP := 'CARRIER_UPDATE';
                R_RESULT := P_CARRIER_ID;
                /*UPDATE TB_CARRIER_INFO SET CARRIER_ID=P_CARRIER_ID, CARRIER_LOC=P_CARRIER_LOC, PRODUCT_STAT=P_PRODUCT_STAT, POLARITY_STAT=P_POLARITY_STAT, 
                    WINDERDIR_STAT=P_WINDERDIR_STAT, PRODUCT_CNT=P_PRODUCT_CNT, FINALLOC_NO=P_FINALLOC_NO, INNERTYPE_GB=P_INNERTYPE_GB, 
                    PALLET_GB=P_PALLET_GB, TRAYSTACK_CNT=P_TRAYSTACK_CNT, TRAYTYPE_STAT=P_TRAYTYPE_STAT,
                    UNCOATED_STAT=P_UNCOATED_STAT, CORETYPE_STAT=P_CORETYPE_STAT, VALIDATION_ID=P_VALIDATION_ID, 
                    PRODUCTEND_STAT=P_PRODUCTEND_STAT, CARRIER_CD=P_CARRIER_CD, CARRIER_GB=P_CARRIER_GB,
                    CARRIER_STAT=P_CARRIER_STAT, LOT_ID=P_LOT_ID, FIRSTLOT_ID=P_FIRSTLOT_ID, SECONDLOT_ID=P_SECONDLOT_ID, 
                    THIRDLOT_ID=P_THIRDLOT_ID, FOURTHLOT_ID=P_FOURTHLOT_ID,
                    FIFTHLOT_ID=FIFTHLOT_ID, SIXTHLOT_ID=P_SIXTHLOT_ID, CARRYIN_DTTM=P_CARRYIN_DTTM, CARRIERID_STAT=P_CARRIERID_STAT 
                    WHERE CARRIER_ID=P_CARRIER_ID AND SCS_CD=P_SCS_CD;*/
                UPDATE TB_CARRIER_INFO SET CARRIER_ID=P_CARRIER_ID, CARRIER_LOC=P_CARRIER_LOC, PRODUCT_STAT=P_PRODUCT_STAT, POLARITY_STAT=P_POLARITY_STAT, 
                    WINDERDIR_STAT=P_WINDERDIR_STAT, PRODUCT_CNT=P_PRODUCT_CNT, FINALLOC_NO=P_FINALLOC_NO, INNERTYPE_GB=P_INNERTYPE_GB, 
                    PALLET_GB=P_PALLET_GB, TRAYSTACK_CNT=P_TRAYSTACK_CNT, TRAYTYPE_STAT=P_TRAYTYPE_STAT,
                    UNCOATED_STAT=P_UNCOATED_STAT, CORETYPE_STAT=P_CORETYPE_STAT, VALIDATION_ID=P_VALIDATION_ID, 
                    PRODUCTEND_STAT=P_PRODUCTEND_STAT, CARRIER_CD=P_CARRIER_CD, CARRIER_GB=P_CARRIER_GB,
                    CARRIER_STAT=P_CARRIER_STAT, LOT_ID=P_LOT_ID, FIRSTLOT_ID=P_FIRSTLOT_ID, SECONDLOT_ID=P_SECONDLOT_ID, 
                    THIRDLOT_ID=P_THIRDLOT_ID, FOURTHLOT_ID=P_FOURTHLOT_ID,
                    FIFTHLOT_ID=FIFTHLOT_ID, SIXTHLOT_ID=P_SIXTHLOT_ID, CARRYIN_DTTM=P_CARRYIN_DTTM, CARRIERID_STAT=P_CARRIERID_STAT, CARRIERHEIGHT_STAT=P_CARRIERHEIGHT_STAT 
                    WHERE CARRIER_ID=P_CARRIER_ID AND SCS_CD=P_SCS_CD;  /* CARRIER_ID 로 유니크 하게 관리함. 240330 RGJ  */         
            END IF;
        END IF;

        COMMIT;
    ELSE
        LOG_TEMP1 := 'PASS';
        R_TEMP := 'LOCATION NULL';
        R_RESULT := P_CARRIER_ID;    
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NO_LOC';  
            R_TEMP := LOG_TEMP1;
            R_CARRIER_ID := P_CARRIER_ID;
            R_CARRIER_LOC := P_CARRIER_LOC;
            ROLLBACK;
        END;    
END USP_STC_CARRIER_INFO_SET;

/

create or replace PROCEDURE "USP_STC_CLIENT_ORDER_SET" 
(
    P_SCS_CD                IN NVARCHAR2,
    P_CMD_GB                IN NVARCHAR2,
    P_TARGET_CD             IN NVARCHAR2,
    P_TARGET_ID             IN NVARCHAR2,
    P_TARGET_VALUE          IN NVARCHAR2,
    P_CREATE_DTTM           IN NVARCHAR2,
    P_REQUESTER_GB          IN CHAR,
    P_DEL                   IN CHAR,
    P_JOB_ID                IN NVARCHAR2,
    P_CLIENT_CD             IN NVARCHAR2,
    R_RESULT                OUT NVARCHAR2,
    R_TEMP                  OUT NVARCHAR2
)
IS
    V_CNT           NUMBER := 0;
    V_TARGET_ID     NVARCHAR2(64);
    V_TARGET_VAR    NVARCHAR2(64);
BEGIN
    IF P_CLIENT_CD IS NULL THEN
        IF P_TARGET_ID IS NULL AND P_TARGET_VALUE IS NOT NULL THEN
            IF P_CMD_GB IS NULL THEN
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_VALUE)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB IS NULL 
                        AND TMP_CLIENT_ORDER.TARGET_VALUE=P_TARGET_VALUE AND REQUESTER_GB=P_REQUESTER_GB;
            ELSE
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_VALUE)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB=P_CMD_GB 
                        AND TMP_CLIENT_ORDER.TARGET_VALUE=P_TARGET_VALUE AND REQUESTER_GB=P_REQUESTER_GB;
            END IF;
        ELSE
            IF P_CMD_GB IS NULL THEN
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_ID)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB IS NULL 
                        AND TMP_CLIENT_ORDER.TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB;            
            ELSE
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_ID)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB=P_CMD_GB 
                        AND TMP_CLIENT_ORDER.TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB;
            END IF;
        END IF;    
    ELSE
        IF P_TARGET_ID IS NULL AND P_TARGET_VALUE IS NOT NULL THEN
            IF P_CMD_GB IS NULL THEN
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_VALUE)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB IS NULL 
                        AND TMP_CLIENT_ORDER.TARGET_VALUE=P_TARGET_VALUE AND TMP_CLIENT_ORDER.CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
            ELSE
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_VALUE)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB=P_CMD_GB 
                        AND TMP_CLIENT_ORDER.TARGET_VALUE=P_TARGET_VALUE AND TMP_CLIENT_ORDER.CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
            END IF;                    
        ELSE
            IF P_CMD_GB IS NULL THEN
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_ID)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB IS NULL
                        AND TMP_CLIENT_ORDER.TARGET_ID=P_TARGET_ID AND TMP_CLIENT_ORDER.CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;            
            ELSE
                SELECT COUNT(TMP_CLIENT_ORDER.TARGET_ID)
                    INTO V_CNT
                    FROM TB_CLIENT_ORDER TMP_CLIENT_ORDER WHERE TMP_CLIENT_ORDER.SCS_CD=P_SCS_CD AND TMP_CLIENT_ORDER.CMD_GB=P_CMD_GB 
                        AND TMP_CLIENT_ORDER.TARGET_ID=P_TARGET_ID AND TMP_CLIENT_ORDER.CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
            END IF;                    
        END IF;
    END IF;

    IF V_CNT=0 AND P_DEL = '0' THEN
        R_TEMP := 'REQ_INSERT';
        R_RESULT := P_CMD_GB;   

        IF P_DEL='0' THEN
            INSERT INTO TB_CLIENT_ORDER (SCS_CD, CMD_GB, TARGET_CD, TARGET_ID, TARGET_VALUE, CREATE_DTTM, REQUESTER_GB, JOB_ID, CLIENT_CD)
                VALUES (P_SCS_CD, P_CMD_GB, P_TARGET_CD, P_TARGET_ID, P_TARGET_VALUE, P_CREATE_DTTM, P_REQUESTER_GB, P_JOB_ID, P_CLIENT_CD);
        END IF;
    ELSE
        IF P_DEL='1' THEN
            IF P_CLIENT_CD IS NULL THEN
                IF P_TARGET_ID IS NULL AND P_TARGET_VALUE IS NOT NULL THEN
                    IF P_CMD_GB IS NULL THEN
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB IS NULL AND TARGET_VALUE=P_TARGET_VALUE AND REQUESTER_GB=P_REQUESTER_GB;
                    ELSE
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB=P_CMD_GB AND TARGET_VALUE=P_TARGET_VALUE AND REQUESTER_GB=P_REQUESTER_GB;
                    END IF;
                ELSE
                    IF P_CMD_GB IS NULL THEN
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB IS NULL AND TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB;
                    ELSE
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB=P_CMD_GB AND TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB;
                    END IF;
                END IF;
            ELSE
                IF P_TARGET_ID IS NULL AND P_TARGET_VALUE IS NOT NULL THEN
                    IF P_CMD_GB IS NULL THEN
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB IS NULL AND TARGET_VALUE=P_TARGET_VALUE AND CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
                    ELSE
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB=P_CMD_GB AND TARGET_VALUE=P_TARGET_VALUE AND CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
                    END IF;
                ELSE
                    IF P_CMD_GB IS NULL THEN
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB IS NULL AND TARGET_ID=P_TARGET_ID AND CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
                    ELSE
                        DELETE FROM TB_CLIENT_ORDER WHERE SCS_CD=P_SCS_CD AND CMD_GB=P_CMD_GB AND TARGET_ID=P_TARGET_ID AND CLIENT_CD=P_CLIENT_CD AND REQUESTER_GB=P_REQUESTER_GB;
                    END IF;                        
                END IF;
            END IF;
            R_TEMP := 'REQ_DELETE';
            R_RESULT := P_CMD_GB;
        ELSE
            IF P_CLIENT_CD IS NULL THEN
                UPDATE TB_CLIENT_ORDER 
                    SET CMD_GB=P_CMD_GB, TARGET_VALUE=P_TARGET_VALUE, CREATE_DTTM=P_CREATE_DTTM, REQUESTER_GB=P_REQUESTER_GB, JOB_ID=P_JOB_ID, CLIENT_CD=P_CLIENT_CD 
                    WHERE SCS_CD=P_SCS_CD AND TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB;
            ELSE
                UPDATE TB_CLIENT_ORDER 
                    SET CMD_GB=P_CMD_GB, TARGET_VALUE=P_TARGET_VALUE, CREATE_DTTM=P_CREATE_DTTM, REQUESTER_GB=P_REQUESTER_GB, JOB_ID=P_JOB_ID, CLIENT_CD=P_CLIENT_CD 
                    WHERE SCS_CD=P_SCS_CD AND TARGET_ID=P_TARGET_ID AND REQUESTER_GB=P_REQUESTER_GB AND CLIENT_CD=P_CLIENT_CD;
            END IF;
            R_TEMP := 'REQ_UPDATE';
            R_RESULT := P_CMD_GB;

        END IF;
    END IF;

    COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NO_REQ';
            R_TEMP := 'REQ_EXCEPTION';
            ROLLBACK;
        END;    
END USP_STC_CLIENT_ORDER_SET;


/

create or replace PROCEDURE "USP_STC_CONFIG_INFO_SET" 
(
    P_NUM           IN NUMBER,
    P_SCS_CD        IN NVARCHAR2,
    P_CONFIG_NM     IN NVARCHAR2,
    P_CONFIG_GB     IN NVARCHAR2,
    P_CONFIG_VAL    IN NVARCHAR2,
    P_CONFIG_DEF    IN NVARCHAR2,
    P_CONFIG_DES    IN NVARCHAR2,
    R_RESULT        OUT NVARCHAR2,
    R_TEMP          OUT NVARCHAR2
)
IS
    V_CNT  NUMBER := 0;
BEGIN
        SELECT COUNT(CONFIG_VAL)
            INTO V_CNT
            FROM TB_CONFIG_INFO WHERE SCS_CD=P_SCS_CD AND CONFIG_GB=P_CONFIG_GB AND CONFIG_NM=P_CONFIG_NM;

        IF V_CNT=0 THEN
            R_TEMP := 'CONFIG_INSERT';
            R_RESULT := P_CONFIG_NM;

            V_CNT := 0;
            SELECT COUNT(CONFIG_GB)
                INTO V_CNT
                FROM TB_CONFIG_INFO WHERE SCS_CD=P_SCS_CD AND CONFIG_GB=P_CONFIG_GB AND CONFIG_NM=P_CONFIG_NM;

            IF V_CNT<>0 THEN
                UPDATE TB_CONFIG_INFO SET CONFIG_NM=P_CONFIG_NM, CONFIG_GB=P_CONFIG_GB, CONFIG_VAL=P_CONFIG_VAL, CONFIG_DEF=P_CONFIG_DEF, CONFIG_DES=P_CONFIG_DES
                    WHERE SCS_CD=P_SCS_CD AND CONFIG_GB=P_CONFIG_GB AND CONFIG_NM=P_CONFIG_NM;              
            ELSE
                IF P_NUM=0 THEN
                    INSERT INTO TB_CONFIG_INFO(SCS_CD, CONFIG_NM, CONFIG_GB, CONFIG_VAL, CONFIG_DEF, CONFIG_DES) 
                        VALUES (P_SCS_CD, P_CONFIG_NM, P_CONFIG_GB, P_CONFIG_VAL, P_CONFIG_DEF, P_CONFIG_DES);            
                ELSE
                    INSERT INTO TB_CONFIG_INFO(CONFIG_NO, SCS_CD, CONFIG_NM, CONFIG_GB, CONFIG_VAL, CONFIG_DEF, CONFIG_DES) 
                        VALUES (P_NUM, P_SCS_CD, P_CONFIG_NM, P_CONFIG_GB, P_CONFIG_VAL, P_CONFIG_DEF, P_CONFIG_DES);
                END IF;
            END IF;    

        ELSE
            R_TEMP := 'CONFIG_UPDATE';
            R_RESULT := P_CONFIG_NM;

            UPDATE TB_CONFIG_INFO SET CONFIG_NM=P_CONFIG_NM, CONFIG_GB=P_CONFIG_GB, CONFIG_VAL=P_CONFIG_VAL, CONFIG_DEF=P_CONFIG_DEF, CONFIG_DES=P_CONFIG_DES
                WHERE SCS_CD=P_SCS_CD AND CONFIG_GB=P_CONFIG_GB AND CONFIG_NM=P_CONFIG_NM;        
        END IF;

        COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NO_CONFIG';  
            R_TEMP := 'EXCEPTION';
            ROLLBACK;
        END;
END USP_STC_CONFIG_INFO_SET;


/

create or replace PROCEDURE "USP_STC_CONNECT_CLIENT_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_CLIENT_CD         IN NVARCHAR2,
    P_CLIENT_IP         IN NVARCHAR2,
    P_DEL               IN CHAR,
    R_RESULT                OUT NVARCHAR2,
    R_TEMP                  OUT NVARCHAR2
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    SELECT COUNT(CLIENT_CD)
        INTO V_CNT
        FROM TB_CONNECT_CLIENT_INFO WHERE SCS_CD=P_SCS_CD AND CLIENT_IP=P_CLIENT_IP;

    IF V_CNT=0 AND P_DEL = '0' THEN
        INSERT INTO TB_CONNECT_CLIENT_INFO(SCS_CD, CLIENT_CD, CLIENT_IP) 
            VALUES (P_SCS_CD, P_CLIENT_CD, P_CLIENT_IP);
        R_RESULT:='INSERT_CHECK';
        R_TEMP:=P_CLIENT_CD;
    ELSE
        IF P_DEL='1' THEN
            DELETE FROM TB_CONNECT_CLIENT_INFO WHERE SCS_CD=P_SCS_CD AND CLIENT_IP=P_CLIENT_IP AND CLIENT_CD=P_CLIENT_CD;
            R_RESULT:='DELETE_CHECK';
            R_TEMP:=P_CLIENT_CD;
        END IF;
    END IF;

END USP_STC_CONNECT_CLIENT_SET;

/

create or replace PROCEDURE "USP_STC_EQP_INFO_SET" 
(
    P_SCS_IP                    IN NVARCHAR2,
    P_SCS_CD                    IN NVARCHAR2,
    P_MCS_STAT                  IN CHAR,
    P_SCS_STAT                  IN CHAR,
    P_PLC_STAT                  IN CHAR,
    P_SYSTEM_STAT               IN CHAR,
    P_SCS_NM                    IN NVARCHAR2,
    P_SCS_NO                    IN NVARCHAR2,
    P_DBFIRSTIP_NO              IN NVARCHAR2,
    P_DBFIRSTPORT_NO            IN NVARCHAR2,
    P_DBFIRSTSERVICE_NM         IN NVARCHAR2,
    P_DBSECONDIP_NO             IN NVARCHAR2,
    P_DBSECONDPORT_NO           IN NVARCHAR2,
    P_DBSECONDSERVICE_NM        IN NVARCHAR2,
    P_DBACCOUNT_NM              IN NVARCHAR2,
    P_DBPASSWORD_GB             IN NVARCHAR2,
    P_INIT                      IN CHAR,
    R_RESULT                    OUT NVARCHAR2,
    R_TEMP                      OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    SELECT COUNT(EQP_ID)
        INTO V_CNT
        FROM TB_EQP_INFO WHERE EQP_ID=P_SCS_CD;

    IF V_CNT=0 THEN
        INSERT INTO TB_EQP_INFO 
             (EQP_NM, EQP_ID, EQP_NO, IP_NO, MCS_STAT, SCS_STAT, PLC_STAT, SYSTEM_STAT, DBFIRSTIP_NO, DBFIRSTPORT_NO, DBFIRSTSERVICE_NM, DBSECONDIP_NO, DBSECONDPORT_NO, DBSECONDSERVICE_NM, DBACCOUNT_NM, DBPASSWORD_GB)
             VALUES 
             (P_SCS_NM, P_SCS_CD, P_SCS_NO, P_SCS_IP, P_MCS_STAT, P_SCS_STAT, P_PLC_STAT, P_SYSTEM_STAT, P_DBFIRSTIP_NO, P_DBFIRSTPORT_NO, P_DBFIRSTSERVICE_NM, P_DBSECONDIP_NO, P_DBSECONDPORT_NO, P_DBSECONDSERVICE_NM, P_DBACCOUNT_NM, P_DBPASSWORD_GB);
        R_RESULT := 'EQP_INSERT';
        R_TEMP := P_SCS_CD;
    ELSIF P_INIT='1' THEN
        UPDATE TB_EQP_INFO SET MCS_STAT=P_MCS_STAT, SCS_STAT=P_SCS_STAT, PLC_STAT=P_PLC_STAT, SYSTEM_STAT=P_SYSTEM_STAT, IP_NO=P_SCS_IP, EQP_NM=P_SCS_NM, EQP_NO=P_SCS_NO, DBFIRSTIP_NO=P_DBFIRSTIP_NO, DBFIRSTSERVICE_NM=P_DBFIRSTSERVICE_NM,
            DBSECONDIP_NO=P_DBSECONDIP_NO, DBSECONDPORT_NO=P_DBSECONDPORT_NO, DBSECONDSERVICE_NM=P_DBSECONDSERVICE_NM, DBACCOUNT_NM=P_DBACCOUNT_NM, DBPASSWORD_GB=P_DBPASSWORD_GB
            WHERE EQP_ID=P_SCS_CD;
    ELSE
        UPDATE TB_EQP_INFO SET MCS_STAT=P_MCS_STAT, SCS_STAT=P_SCS_STAT, PLC_STAT=P_PLC_STAT, SYSTEM_STAT=P_SYSTEM_STAT WHERE EQP_ID=P_SCS_CD;
        R_RESULT := 'EQP_UPDATE';  
        R_TEMP := P_SCS_CD;     
    END IF;

    COMMIT;    

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NO_EQP'; 
            R_TEMP := 'EXCEPTION';
            ROLLBACK;
        END;      
END USP_STC_EQP_INFO_SET;

/

create or replace PROCEDURE "USP_STC_JOB_INFO_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_CREATE_DTTM       IN TIMESTAMP,
    P_CMD_ID            IN NVARCHAR2,
    P_CARRIER_ID        IN NVARCHAR2,
    P_SOUR_ID           IN NVARCHAR2,
    P_DEST_ID           IN NVARCHAR2,
    P_PRIORITY_ORDER    IN NUMBER,
    P_TRANSFER_NO       IN NUMBER,
    P_TRAYTYPE_GB       IN NVARCHAR2,
    P_TRSTATUS_GB       IN NVARCHAR2,
    P_JOBFROM_GB        IN NUMBER,
    P_JOBTYPE_GB        IN NVARCHAR2,
    P_ASSIGNRM_NM       IN NVARCHAR2,
    P_JOBSTEP_NM        IN NUMBER,
    P_SUBJOBTYPE_NM     IN NUMBER,
    P_DEL               IN CHAR,
    P_SOURZONE_NM       IN NVARCHAR2,
    P_DESTZONE_NM       IN NVARCHAR2,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    SELECT COUNT(CMD_ID)
        INTO V_CNT
        FROM TB_JOB_INFO WHERE SCS_CD=P_SCS_CD AND CMD_ID=P_CMD_ID;

    IF V_CNT=0 AND P_DEL='0' THEN
        INSERT INTO TB_JOB_INFO (SCS_CD, CREATE_DTTM, CARRIER_ID, SOUR_ID, DEST_ID, PRIORITY_ORDER, TRANSFER_NO, TRAYTYPE_GB, CMD_ID, JOBFROM_GB, TRSTATUS_GB, JOBTYPE_GB, ASSIGNRM_NM, JOBSTEP_NM, SUBJOBTYPE_NM, SOURZONE_NM, DESTZONE_NM)
            VALUES (P_SCS_CD, P_CREATE_DTTM, P_CARRIER_ID, P_SOUR_ID, P_DEST_ID, P_PRIORITY_ORDER, P_TRANSFER_NO, P_TRAYTYPE_GB, P_CMD_ID, P_JOBFROM_GB, P_TRSTATUS_GB, P_JOBTYPE_GB, P_ASSIGNRM_NM, P_JOBSTEP_NM, P_SUBJOBTYPE_NM, P_SOURZONE_NM, P_DESTZONE_NM);
        R_RESULT := 'JOB_INSERT';
        R_TEMP := P_CMD_ID;
    ELSE
        IF P_DEL='1' THEN
            DELETE FROM TB_JOB_INFO WHERE SCS_CD=P_SCS_CD AND CMD_ID=P_CMD_ID;
            R_RESULT := 'JOB_DELETE';
            R_TEMP := P_CMD_ID;
        ELSE
            UPDATE TB_JOB_INFO SET PRIORITY_ORDER=P_PRIORITY_ORDER, DEST_ID=DEST_ID, TRANSFER_NO=P_TRANSFER_NO, ASSIGNRM_NM=P_ASSIGNRM_NM, JOBSTEP_NM=JOBSTEP_NM, TRSTATUS_GB=P_TRSTATUS_GB, SUBJOBTYPE_NM=P_SUBJOBTYPE_NM,
                SOURZONE_NM=P_SOURZONE_NM, DESTZONE_NM=P_DESTZONE_NM
                WHERE CMD_ID=P_CMD_ID AND SCS_CD=P_SCS_CD;
            R_RESULT := 'JOB_UPDATE';
            R_TEMP := P_CMD_ID;            
        END IF;
    END IF;

    COMMIT;

    EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        R_RESULT := 'NO_JOB';  
        R_TEMP := 'EXCEPTION';
        ROLLBACK;
    END;  
END USP_STC_JOB_INFO_SET;

/

create or replace PROCEDURE "USP_STC_LOG_INFO_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_LOG_NM            IN NVARCHAR2,
    P_RECODE_DTTM       IN NVARCHAR2,
    P_COL_1             IN NVARCHAR2,
    P_COL_2             IN NVARCHAR2,
    P_COL_3             IN NVARCHAR2,
    P_COL_4             IN NVARCHAR2,
    P_COL_5             IN NVARCHAR2,
    P_COL_6             IN NVARCHAR2,
    P_COL_7             IN NVARCHAR2,
    P_COL_8             IN NVARCHAR2,
    P_COL_9             IN NVARCHAR2,
    P_COL_10            IN NVARCHAR2,
    P_COL_11            IN NVARCHAR2,
    P_COL_12            IN NVARCHAR2,
    P_COL_13            IN NVARCHAR2,
    P_SECS2             IN CLOB,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    IF P_LOG_NM = 'ALARM' THEN
        SELECT COUNT(COL_6)
            INTO V_CNT
            FROM TB_UNITED_LOG_INFO TMP_UNITED_LOG_INFO WHERE TMP_UNITED_LOG_INFO.SCS_CD = P_SCS_CD AND TMP_UNITED_LOG_INFO.LOG_NM = P_LOG_NM
                AND TMP_UNITED_LOG_INFO.COL_1 = P_COL_1 AND TMP_UNITED_LOG_INFO.COL_6 = P_COL_6;

        IF V_CNT=0 THEN
            INSERT INTO TB_UNITED_LOG_INFO (SCS_CD, LOG_NM, RECODE_DTTM, COL_1, COL_2, COL_3, COL_4, COL_5, COL_6, COL_7, COL_8, COL_9, COL_10, COL_11, COL_12, COL_13)
                VALUES (P_SCS_CD, P_LOG_NM, P_RECODE_DTTM, P_COL_1, P_COL_2, P_COL_3, P_COL_4, P_COL_5, P_COL_6, P_COL_7, P_COL_8, P_COL_9, P_COL_10, P_COL_11, P_COL_12, P_COL_13);
        ELSE
            UPDATE TB_UNITED_LOG_INFO SET COL_7=P_COL_7 WHERE SCS_CD=P_SCS_CD AND LOG_NM=P_LOG_NM AND COL_1=P_COL_1 AND COL_6=P_COL_6;
        END IF;
    ELSE
        IF P_LOG_NM='HSMS' THEN
            INSERT INTO TB_UNITED_LOG_INFO (SCS_CD, LOG_NM, RECODE_DTTM, COL_1, COL_2, COL_3, COL_4, COL_5, COL_6, COL_7, COL_8, COL_9, COL_10, COL_11, COL_12, COL_13, HIST_SECS2)
                VALUES (P_SCS_CD, P_LOG_NM, P_RECODE_DTTM, P_COL_1, P_COL_2, P_COL_3, P_COL_4, P_COL_5, P_COL_6, P_COL_7, P_COL_8, P_COL_9, P_COL_10, P_COL_11, P_COL_12, P_COL_13, P_SECS2);        
        ELSE
            INSERT INTO TB_UNITED_LOG_INFO (SCS_CD, LOG_NM, RECODE_DTTM, COL_1, COL_2, COL_3, COL_4, COL_5, COL_6, COL_7, COL_8, COL_9, COL_10, COL_11, COL_12, COL_13)
                VALUES (P_SCS_CD, P_LOG_NM, P_RECODE_DTTM, P_COL_1, P_COL_2, P_COL_3, P_COL_4, P_COL_5, P_COL_6, P_COL_7, P_COL_8, P_COL_9, P_COL_10, P_COL_11, P_COL_12, P_COL_13);
        END IF;
    END IF;

    R_TEMP := P_LOG_NM;
    R_RESULT := 'OK';

    COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NG';  
            R_TEMP := 'LOG_EXCEPTION';
            ROLLBACK;
        END;     
END USP_STC_LOG_INFO_SET;


/

create or replace PROCEDURE "USP_STC_PIO_INFO_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_MODULE_NM         IN NVARCHAR2,
    P_DIRECTION_GB      IN NVARCHAR2,
    P_DATA_VAL          IN NVARCHAR2,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;

BEGIN
   SELECT COUNT (TMP_PIO_INFO.MODULE_NM)
     INTO V_CNT
     FROM TB_PIO_INFO TMP_PIO_INFO WHERE TMP_PIO_INFO.SCS_CD = P_SCS_CD AND TMP_PIO_INFO.MODULE_NM = P_MODULE_NM AND TMP_PIO_INFO.DIRECTION_GB = P_DIRECTION_GB;

    IF V_CNT=0 THEN
        INSERT INTO TB_PIO_INFO (SCS_CD, MODULE_NM, DIRECTION_GB, DATA_VAL)
            VALUES (P_SCS_CD, P_MODULE_NM, P_DIRECTION_GB, P_DATA_VAL);
        R_RESULT := 'PIO_INSERT';
        R_TEMP := P_MODULE_NM;    
    ELSE
        UPDATE TB_PIO_INFO 
            SET SCS_CD=P_SCS_CD, MODULE_NM=P_MODULE_NM, DIRECTION_GB=P_DIRECTION_GB, DATA_VAL=P_DATA_VAL 
            WHERE SCS_CD=P_SCS_CD AND MODULE_NM=P_MODULE_NM AND DIRECTION_GB=P_DIRECTION_GB;
        R_RESULT := 'PIO_UPDATE';
        R_TEMP := P_MODULE_NM;        
    END IF;

    COMMIT;

    EXCEPTION
    WHEN OTHERS THEN
    BEGIN
        R_RESULT := 'NO_PIO';  
        R_TEMP := 'EXCEPTION';
        ROLLBACK;
    END; 
END USP_STC_PIO_INFO_SET;

/

create or replace PROCEDURE "USP_STC_PLC_INFO_SET" 
(
    P_EVENTTIME_DTTM    IN NVARCHAR2,
    P_PLC_NO            IN NUMBER,
    P_SCS_CD            IN NVARCHAR2,
    P_PLC_CD            IN NVARCHAR2,
    P_PLC_IP            IN NVARCHAR2,
    P_PLC_STAT          IN NVARCHAR2,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN

    SELECT COUNT(PLC_CD)
        INTO V_CNT
        FROM TB_PLC_INFO WHERE SCS_CD=P_SCS_CD AND PLC_CD=P_PLC_CD;

    IF V_CNT=0 THEN
        INSERT INTO TB_PLC_INFO (PLC_NO, SCS_CD, PLC_CD, PLC_IP, PLC_STAT, EVENTTIME_DTTM)
            VALUES (P_PLC_NO, P_SCS_CD, P_PLC_CD, P_PLC_IP, P_PLC_STAT, P_EVENTTIME_DTTM);
        R_RESULT := 'PLC_INSERT';
        R_TEMP := P_PLC_CD;    
    ELSE
        UPDATE TB_PLC_INFO SET PLC_STAT=P_PLC_STAT, EVENTTIME_DTTM=P_EVENTTIME_DTTM
            WHERE PLC_CD=P_PLC_CD AND SCS_CD=P_SCS_CD;
        R_RESULT := 'PLC_UPDATE';
        R_TEMP := P_PLC_CD;      
    END IF;

END USP_STC_PLC_INFO_SET;

/

create or replace PROCEDURE "USP_STC_SHELF_INFO_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_CARRIER_LOC       IN NVARCHAR2,
    P_ZONE_NM           IN NVARCHAR2,
    P_EXIST_GB          IN NUMBER,
    P_CARRIER_ID        IN NVARCHAR2,
    P_USE_STAT          IN CHAR,
    P_SHELFSIZE_GB      IN NUMBER,
    P_STATUS_GB         IN NUMBER,
    P_DEADZONE_STAT     IN CHAR,
    P_INSTALL_DTTM      IN TIMESTAMP,
    P_FLOOR_NM          IN NUMBER,
    P_MEMO_GB           IN NVARCHAR2,
    P_FIRE_GB           IN NUMBER,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    SELECT COUNT(CARRIER_LOC)
        INTO V_CNT
        FROM TB_SHELF_INFO WHERE SCS_CD=P_SCS_CD AND CARRIER_LOC=P_CARRIER_LOC;

    IF V_CNT=0 THEN
        INSERT INTO TB_SHELF_INFO(SCS_CD, CARRIER_LOC, ZONE_NM, EXIST_GB,
            CARRIER_ID, USE_STAT, SHELFSIZE_GB, STATUS_GB, DEADZONE_STAT, INSTALL_DTTM, FLOOR_NM, MEMO_GB,FIRE_GB) 
            VALUES (P_SCS_CD, P_CARRIER_LOC, P_ZONE_NM, P_EXIST_GB, P_CARRIER_ID, P_USE_STAT, P_SHELFSIZE_GB, P_STATUS_GB, P_DEADZONE_STAT, P_INSTALL_DTTM, P_FLOOR_NM, P_MEMO_GB,P_FIRE_GB);

        R_TEMP := 'SHELF_INSERT';
        R_RESULT := P_CARRIER_LOC;            
        /*INSERT INTO TB_SHELF_INFO(SCS_CD, CARRIER_LOC, ZONE_NM, EXIST_GB,
            CARRIER_ID, USE_STAT, SHELFSIZE_GB, STATUS_GB, DEADZONE_STAT) 
            VALUES (P_SCS_CD, P_CARRIER_LOC, P_ZONE_NM, P_EXIST_GB, P_CARRIER_ID, P_USE_STAT, P_SHELFSIZE_GB, P_STATUS_GB, P_DEADZONE_STAT);*/
    ELSE
        UPDATE TB_SHELF_INFO SET EXIST_GB=P_EXIST_GB,
            CARRIER_ID=P_CARRIER_ID, USE_STAT=P_USE_STAT, SHELFSIZE_GB=P_SHELFSIZE_GB, STATUS_GB=P_STATUS_GB, INSTALL_DTTM=P_INSTALL_DTTM, DEADZONE_STAT=P_DEADZONE_STAT, MEMO_GB=P_MEMO_GB, FIRE_GB=P_FIRE_GB
            WHERE SCS_CD=P_SCS_CD AND CARRIER_LOC=P_CARRIER_LOC;

        R_TEMP := 'SHELF_UPDATE';
        R_RESULT := P_CARRIER_LOC;            
        /*UPDATE TB_SHELF_INFO SET EXIST_GB=P_EXIST_GB,
            CARRIER_ID=P_CARRIER_ID, USE_STAT=P_USE_STAT, SHELFSIZE_GB=P_SHELFSIZE_GB, STATUS_GB=P_STATUS_GB
            WHERE SCS_CD=P_SCS_CD AND CARRIER_LOC=P_CARRIER_LOC;*/

    END IF;

    COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'SHELF_NO_LOC';  
            R_TEMP := 'EXCEPTION';
            ROLLBACK;
        END;      
END USP_STC_SHELF_INFO_SET;


/

create or replace PROCEDURE "USP_STC_TERMINAL_MSG_SET" 
(
    P_SCS_CD            IN NVARCHAR2,
    P_TID_ID            IN NVARCHAR2,
    P_TCODE_CD          IN NVARCHAR2,
    P_TEXT_NM           IN NVARCHAR2,
    P_EVENTTIME_DTTM    IN NVARCHAR2
)
IS

BEGIN
    INSERT INTO TB_HIST_TERMINAL_MSG (SCS_CD, TID_ID, TCODE_CD, TEXT_NM, EVENTTIME_DTTM)
        VALUES (P_SCS_CD, P_TID_ID, P_TCODE_CD, P_TEXT_NM, P_EVENTTIME_DTTM);

    COMMIT;
END USP_STC_TERMINAL_MSG_SET;


/

create or replace PROCEDURE "USP_STC_USER_INFO_SET" 
(
    P_SCS_CD        IN NVARCHAR2,
    P_USER_ID       IN NVARCHAR2,
    P_PASSWORD_GB   IN NVARCHAR2,
    P_USER_NM       IN NVARCHAR2,
    P_TEAM_NM       IN NVARCHAR2,
    P_GROUP_GB      IN NUMBER,
    P_USER_STAT     IN CHAR,
    P_USING_DTTM    IN NUMBER,
    P_DEL           IN CHAR,
    R_RESULT            OUT NVARCHAR2,
    R_TEMP              OUT NVARCHAR2    
)
IS
    V_CNT  NUMBER := 0;
BEGIN
    SELECT COUNT(USER_ID)
        INTO V_CNT
        FROM TB_USER_INFO WHERE SCS_CD=P_SCS_CD AND USER_ID=P_USER_ID;

    IF V_CNT=0 AND P_DEL = '0' THEN
        INSERT INTO TB_USER_INFO (SCS_CD, USER_ID, USER_NM, TEAM_NM, PASSWORD_GB, GROUP_GB, USE_STAT, USING_DTTM) 
            VALUES (P_SCS_CD, P_USER_ID, P_USER_NM, P_TEAM_NM, P_PASSWORD_GB, P_GROUP_GB, P_USER_STAT, P_USING_DTTM);
        R_RESULT := 'USER_INSERT';  
        R_TEMP := P_USER_ID;    
    ELSE
        IF P_DEL='1' THEN
            DELETE FROM TB_USER_INFO WHERE SCS_CD=P_SCS_CD AND USER_ID=P_USER_ID;
            R_RESULT := 'USER_DELETE';  
            R_TEMP := P_USER_ID;
        ELSE
            UPDATE TB_USER_INFO SET USER_NM=P_USER_NM, TEAM_NM=P_TEAM_NM, PASSWORD_GB=P_PASSWORD_GB, GROUP_GB=P_GROUP_GB, USE_STAT=P_USER_STAT, USING_DTTM=P_USING_DTTM WHERE USER_ID=P_USER_ID;
            R_RESULT := 'USER_UPDATE';  
            R_TEMP := P_USER_ID;        
        END IF;
    END IF;

    COMMIT;

    EXCEPTION
        WHEN OTHERS THEN
        BEGIN
            R_RESULT := 'NO_USER';  
            R_TEMP := 'EXCEPTION';
            ROLLBACK;
        END;       
END USP_STC_USER_INFO_SET;



